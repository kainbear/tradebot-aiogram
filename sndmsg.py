import logging
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7735642608:AAG1HgbLkfOsj8EmnLY2IYaOCwCEEd-9Zbs'

# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @your_channel)
CHANNEL_ID = '@asdtest41w'

# –í–∞—à ID –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = 1046944985

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="get_history"),
        InlineKeyboardButton("–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="notify_all")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == ADMIN_USER_ID:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = get_main_menu()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.", reply_markup=keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async def send_message_to_channel(message_text: str):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(CHANNEL_ID, message_text, parse_mode=ParseMode.MARKDOWN)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
@dp.callback_query_handler(lambda c: c.data == "get_history")
async def process_callback_get_history(callback_query: types.CallbackQuery):
    try:
        # –ü—Ä–∏–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        story_text = (
            f"–í–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è, {callback_query.from_user.username}:\n\n"
            "–í –æ–¥–∏–Ω –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å, –±–æ—Ç —Ä–µ—à–∏–ª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n"
            "–≠—Ç–æ –±—ã–ª–∞ –∏—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(callback_query.from_user.id, story_text, parse_mode=ParseMode.MARKDOWN)

        # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ª–æ–∂–µ–Ω–∞!")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –≤ 5 —Å–µ–∫—É–Ω–¥
        await bot.send_message(callback_query.from_user.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥: –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
@dp.callback_query_handler(lambda c: c.data == "notify_all")
async def process_notify_all(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if callback_query.from_user.id != ADMIN_USER_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    try:
        # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        notification_text = ("–í–Ω–∏–º–∞–Ω–∏–µ! –î—Ä—É–∑—å—è, –≤—Å–µ—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã –°–∫–æ—Ä–æ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚úÖ ")
        await send_message_to_channel(notification_text)

        # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback_query.answer("–í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω—ã!")

    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_start():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling()

if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º executor –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)